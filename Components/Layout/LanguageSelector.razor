@using System.Globalization
@using Microsoft.Extensions.Options
@inject IConfiguration Configuration
@inject NavigationManager Navigation

<MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopLeft" Class="ma-1">
	<ActivatorContent>
		<MudIconButton Icon="@CurrentLanguageIcon"  />
	</ActivatorContent>
	<ChildContent>
	@foreach (var culture in SupportedCultures)
	{
		<MudMenuItem OnClick="@(() => ChangeLanguage(culture))">
			<MudStack Row>
				<MudImage Src="@($"images/flags/{culture.Name}.svg")" Height="20" />
				<MudText Color="Color.Inherit">@culture.NativeName</MudText>
			</MudStack>
		</MudMenuItem>
	}
	</ChildContent>
</MudMenu>

@code {
	private CultureInfo[] SupportedCultures { get; set; }
	private string CurrentLanguageIcon { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		SupportedCultures = Configuration.GetSection("Localization:SupportedCultures").Get<string[]>().Select(x => CultureInfo.GetCultureInfo(x)).ToArray();

		CurrentLanguageIcon = await GetCurrentLanguageIconAsync();
	}

	private void ChangeLanguage(CultureInfo cultureInfo)
	{
		if (CultureInfo.CurrentCulture != cultureInfo)
		{
			var uri = new Uri(Navigation.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
			var cultureEscaped = Uri.EscapeDataString(cultureInfo.Name);
			var uriEscaped = Uri.EscapeDataString(uri);

			Navigation.NavigateTo($"Preference/Set?culture={cultureEscaped}&redirectUri={uriEscaped}", true);
		}
	}

	private async Task<string> GetCurrentLanguageIconAsync()
	{
		var iconPath = Path.Combine("wwwroot", "images", "flags", $"{CultureInfo.CurrentCulture.Name}.svg");

		if (File.Exists(iconPath))
		{
			return await File.ReadAllTextAsync(iconPath);
		}

		return string.Empty;
	}
}